import { useState } from 'react';
import { Alert } from 'react-native';
import { Question, AnswerKey, AIGenerationState, JEETopic } from '../types/test';
import { jeeTopics } from '../data/jeeTopics';

export const useAIGeneration = (
  setQuestions: (questions: Question[]) => void,
  setAnswerKey: (answerKey: AnswerKey) => void,
  setTestStarted: (started: boolean) => void
) => {
  const [aiState, setAiState] = useState<AIGenerationState>({
    isGenerating: false,
    selectedTopics: [],
    numberOfQuestions: 10,
    showTopicSelection: false,
  });

  const toggleTopicSelection = (topicId: string) => {
    setAiState(prev => ({
      ...prev,
      selectedTopics: prev.selectedTopics.includes(topicId)
        ? prev.selectedTopics.filter(id => id !== topicId)
        : [...prev.selectedTopics, topicId]
    }));
  };

  const generateQuestionsWithAI = async () => {
    if (aiState.selectedTopics.length === 0) {
      Alert.alert('Error', 'Please select at least one topic');
      return;
    }

    setAiState(prev => ({ ...prev, isGenerating: true }));

    try {
      const selectedTopicNames = aiState.selectedTopics.map(id => 
        jeeTopics.find(topic => topic.id === id)?.name
      ).filter(Boolean);

      const prompt = `Generate ${aiState.numberOfQuestions} JEE-level multiple choice questions covering the following topics: ${selectedTopicNames.join(', ')}.

IMPORTANT: Return ONLY a valid JSON object in this EXACT format (no additional text, explanations, or markdown):

{
  "questions": [
    {
      "questionNumber": 1,
      "question": "Question text here",
      "optionA": "Option A text",
      "optionB": "Option B text", 
      "optionC": "Option C text",
      "optionD": "Option D text",
      "subject": "Physics/Chemistry/Mathematics",
      "topic": "Specific topic name"
    }
  ],
  "answerKey": {
    "1": "A",
    "2": "B"
  }
}

Requirements:
- Generate exactly ${aiState.numberOfQuestions} questions
- Questions must be JEE Advanced/Mains level difficulty
- Each question must have exactly 4 options (A, B, C, D)
- Only one correct answer per question
- Include proper subject classification (Physics/Chemistry/Mathematics)
- Include specific topic names from: ${selectedTopicNames.join(', ')}
- Answer key must map question numbers to correct options
- Return ONLY the JSON object, no other text`;

      console.log('Sending request to Lyzr AI...');
      
      const response = await fetch('https://agent-prod.studio.lyzr.ai/v3/inference/chat/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': 'sk-default-pFNnvq5oSDeZx345ky9zBJpfhLruHKsO',
        },
        body: JSON.stringify({
          user_id: "newnewton09@gmail.com",
          agent_id: "6856362d0377126b617febfc",
          session_id: "6856362d0377126b617febfc-9ec0zl1twu9",
          message: prompt
        })
      });

      console.log('Response status:', response.status);

      if (!response.ok) {
        throw new Error(`API request failed with status: ${response.status}`);
      }

      const data = await response.json();
      console.log('API Response:', data);
      
      // Extract the AI response
      const aiResponse = data.response || data.message || data.content || '';
      console.log('AI Response text:', aiResponse);
      
      if (!aiResponse) {
        throw new Error('No response received from AI');
      }

      // Try to extract JSON from the response
      let jsonData;
      try {
        // First try to parse the entire response as JSON
        jsonData = JSON.parse(aiResponse);
      } catch (e) {
        // If that fails, try to extract JSON from within the text
        const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
        if (!jsonMatch) {
          throw new Error('No valid JSON found in AI response');
        }
        jsonData = JSON.parse(jsonMatch[0]);
      }

      console.log('Parsed JSON:', jsonData);
      
      if (!jsonData.questions || !Array.isArray(jsonData.questions)) {
        throw new Error('Invalid question format from AI - missing questions array');
      }

      if (jsonData.questions.length === 0) {
        throw new Error('No questions generated by AI');
      }

      // Validate question format
      const validQuestions = jsonData.questions.filter(q => 
        q.questionNumber && 
        q.question && 
        q.optionA && 
        q.optionB && 
        q.optionC && 
        q.optionD && 
        q.subject && 
        q.topic
      );

      if (validQuestions.length === 0) {
        throw new Error('Generated questions are missing required fields');
      }

      console.log('Valid questions:', validQuestions.length);

      // Set the generated questions and answer key
      setQuestions(validQuestions);
      
      if (jsonData.answerKey && Object.keys(jsonData.answerKey).length > 0) {
        setAnswerKey(jsonData.answerKey);
        console.log('Answer key set:', jsonData.answerKey);
      } else {
        console.log('No answer key provided');
      }

      // Hide topic selection and show success
      setAiState(prev => ({ 
        ...prev, 
        isGenerating: false, 
        showTopicSelection: false 
      }));

      Alert.alert(
        'Success!', 
        `${validQuestions.length} questions generated successfully! Ready to start your test?`,
        [
          { text: 'Review Topics', style: 'cancel' },
          { 
            text: 'Start Test', 
            onPress: () => setTestStarted(true)
          }
        ]
      );

    } catch (error) {
      console.error('AI Generation Error:', error);
      
      let errorMessage = 'Failed to generate questions. Please try again.';
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      
      Alert.alert(
        'Generation Failed', 
        errorMessage + '\n\nYou can try again or upload a JSON file manually.',
        [
          { text: 'Try Again', style: 'default' },
          { text: 'Upload JSON', style: 'cancel' }
        ]
      );
      
      setAiState(prev => ({ ...prev, isGenerating: false }));
    }
  };

  return {
    aiState,
    setAiState,
    toggleTopicSelection,
    generateQuestionsWithAI
  };
};